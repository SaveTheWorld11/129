//**********************************************快速排序********************************************************//
//**************************************************************************************************************//


//左右指针法.
int partSort4(int* a, int begin, int end)
{
	int key = a[end];

	int left = begin;
	int right = end;

	//key选择的是最左边，那么最右边就先走.
	while (left < right)
	{
		while (left < right && a[left] <= key)
		{
			++left;
		}

		while (left < right && a[right] >= key)
		{
			--right;
		}

		if (left < right)
		{
			swap(a[right], a[left]);
		}

	}
	swap(a[end], a[left]);

	return left;
}


//int partSort2(int* a, int begin, int end)
//{
//	int first = begin;
//	int second = begin - 1;
//	int key = a[end];
//
//	while (first < end)
//	{
//		if (a[first] < key && ++second != first)
//		{
//			swap(a[second], a[first]);
//		}
//
//		++first;
//	}
//
//	swap(a[first], a[++second]);
//
//	return second;
//}


////挖坑填坑法
//void partSort3(int* a, int begin, int end)
//{
//
//}
//
//
//
//左右指针法.
int partSort(int* a, int begin, int end)
{
	int key = a[end];

	int left = begin;
	int right = end;

	//key选择的是最左边，那么最右边就先走.
	while (left < right)
	{
		while (left < right && a[left] <= key)
		{
			++left;
		}

		while (left < right && a[right] >= key)
		{
			--right;
		}

		if (left < right)
		{
			swap(a[right], a[left]);
		}

	}
	swap(a[end], a[left]);

	return left;
}


int GetMid(int *a, int left, int right)
{
	int mid = left + (right - left) / 2;
	if (a[left] < a[mid])
	{
		if (a[left]>a[right])
		{
			return left;
		}
		else if (a[mid] > a[right])
		{
			return right;
		}
		else
		{
			return mid;
		}
	}
	else
	{
		if (a[mid] > a[right])
		{
			return mid;
		}
		else if (a[left] > a[right])
		{
			return right;
		}
		else
		{
			return left;
		}
	}
}

int partSort2(int* a, int begin, int end)
{
	int first = begin;
	int second = begin - 1;
	swap(a[end], a[GetMid(a, begin, end)]);

	int key = a[end];

	while (first < end)
	{
		if (a[first] < key && ++second != first)
		{
			swap(a[second], a[first]);
		}

		++first;
	}

	swap(a[first], a[++second]);

	return second;
}

int partSort3(int* a, int begin, int end)
{
	int left = begin;
	int right = end;
	swap(a[end], a[GetMid(a, begin, end)]);
	int key = a[end];

	while (left < right)
	{
		while (left < right && a[left] <= key)
		{
			++left;
		}
		
		a[right] = a[left];


		while (left < right && a[right] > key)
		{
			--right;
		}

		a[left] = a[right];
	}
	a[right] = key;
	return left;
}

void quick_Sort(int *a, int begin,int end)
{

	if (begin >= end)
		return;

	int pos = partSort3(a, begin, end);

	quick_Sort(a, begin, pos-1);

	quick_Sort(a, pos+1, end);
}


//左右指针快速排序 非递归

void Quick_Sort(int* a,int size)
{
	int left = 0;
	int right = size - 1;
	stack<int> q;

	q.push(right);
	q.push(left);

	while (!q.empty())
	{	
		left = q.top();
		q.pop();

		right = q.top();
		q.pop();

		int end = right;
		int begin = left;

		if (left < right)
		{
			swap(a[right], a[GetMid(a, left, right)]);
			int key = a[right];

			while (left < right)
			{
				while (left < right && a[left] <= key)
				{
					++left;
				}

				a[right] = a[left];


				while (left < right && a[right] >= key)
				{
					--right;
				}

				a[left] = a[right];
			}
			a[right] = key;

			q.push(end);
			q.push(right + 1);

			q.push(right - 1);
			q.push(begin);
		}
	}
}

//***************************************************************************************************************//
//**************************************************************************************************************//