# define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<Windows.h>
using namespace std;

//                                ***智能指针方面的代码***                                     //

//*********************************************************************************************//
//*********************************************************************************************//
//                               ****实现最简单的智能指针****                                  //





//struct AA
//{
//	int a = 10;
//	int b = 20;
//};
//template<class T>
//class A
//{
//public:
//
//	A(T* ptr)
//		:_ptr(ptr)
//	{}
//
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T& operator*()
//	{
//		return *_ptr;
//	}
//
//	A(A<T>& ap)
//	{}
//	A<T>& operator=(A<T>& ap)
//	{}
//	~A()
//	{delete _ptr;}
//protected:
//	T* _ptr;
//};
//
//int main()
//{
//	A<int>ap1(new int);
//	*ap1 = 10;
//	A<AA>ap2(new AA);
//	cout << *ap1 << endl;
//	cout << (ap2->a)<<"  "<<(ap2->b) << endl;
//	return 0;
//}


//*********************************************************************************************//
//*********************************************************************************************//








//*********************************************************************************************//
//*********************************************************************************************//
//                                 ****//管理权转移****                                        //



//template<class T>
//class AutoPtr
//{
//public:
//
//	AutoPtr(T* ptr)
//		:_ptr(ptr)
//	{}
//
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T& operator*()
//	{
//		return *_ptr;
//	}
//
//	AutoPtr(AutoPtr<T>& ap)
//	{
//		this->_ptr = ap._ptr;
//		ap._ptr = NULL;
//	}
//	AutoPtr<T>& operator=(AutoPtr<T>& ap)
//	{
//		if (this != &ap)
//		{
//			delete this->_ptr;
//			this->_ptr = ap._ptr;
//			ap._ptr = NULL;
//		}
//		return *this;
//	}
//	~AutoPtr()
//	{
//		cout << "智能指针爸爸已经释放过空间了" << endl;
//		delete _ptr;
//	}
//protected:
//	T* _ptr;
//};
//

//*********************************************************************************************//
//*********************************************************************************************//







//*********************************************************************************************//
//*********************************************************************************************//
//                                 ****简单粗暴 防拷贝智能指针****                             //




//template<class T>
//class ScopedPtr
//{
//public:
//	ScopedPtr()
//	{}
//	AutoPtr(T* ptr)
//		:_ptr(ptr)
//	{}
//
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T& operator*()
//	{
//		return *_ptr;
//	}
//	~AutoPtr()
//	{
//		cout << "智能指针爸爸已经释放过空间了" << endl;
//		delete _ptr;
//	}
//
//protected:
//	ScopedPtr(ScopedPtr<T>& s);
//	ScopedPtr<T> operator=(ScopedPtr<T>& s);
//protected:
//	T* _ptr;
//};
//

//*********************************************************************************************//
//*********************************************************************************************//







//*********************************************************************************************//
//*********************************************************************************************//
//                                 ****计数原理的智能指针***                                  //
//template<class T>
//class shared
//{
//public:
//	shared(T* ptr)
//		:_ptr(ptr)
//		, _num(new int(1))
//	{
//	}
//	shared(const shared<T>& ap)
//		:_ptr(ap._ptr)
//		, _num(ap._num)
//	{
//		++(*_num);
//	}
//	shared<T>& operator=(const shared<T>& ap)
//	{
//		if (_ptr != ap._ptr)
//		{
//			Release();
//			_ptr = ap._ptr;
//			_num = ap._num;
//			++(*_num);
//		}
//		return *this;
//	}
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T& operator*()
//	{
//		return *_ptr;
//	}
//	void Release()
//	{
//		if (0 == (--*_num))
//		{
//			cout << "智能指针爸爸帮你释放空间了" << endl;
//			delete _ptr;
//			delete _num;
//			_ptr = NULL;
//			_num = NULL;
//		}
//	}
//	~shared()
//	{
//		Release();
//	}
//protected:
//	T* _ptr;
//	int* _num;
//};
//
//int main()
//{
//	shared<int>ap1(new int);
//	*ap1 = 2;
//	shared<int>ap2(ap1);
//	cout << *ap2 << endl;
//	shared<int>ap3(new int);
//	ap3 = ap1;
//
//}
//*********************************************************************************************//
//*********************************************************************************************//

